{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Add.svelte",
    "FaB.svelte",
    "PostModal.svelte",
    "Navbar.svelte",
    "Home.svelte",
    "Login.svelte",
    "Posts.svelte",
    "Users.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { setContext, onMount } from 'svelte';\nimport { AppState } from './bin/config/Store';\nimport Navbar from './Components/Navbar.svelte';\nimport Home from './Pages/Home.svelte';\nimport Login from './Pages/Login.svelte';\nimport Users from './Pages/Users.svelte';\nimport Posts from './Pages/Posts.svelte';\nimport Profile from './Pages/Profile.svelte';\nsetContext('state', AppState);\nconst { state: { view, authenticated }, Methods: { loggedin, getUserId }, } = AppState;\n$: title = $view;\nconst handleView = (e) => {\n    view.set(e.currentTarget.id);\n    localStorage.setItem('view', $view);\n};\nonMount(() => {\n    if (!$authenticated) {\n        loggedin((data) => __awaiter(void 0, void 0, void 0, function* () {\n            if (data.state === 'success') {\n                const user = yield getUserId(data.user._id);\n                if (user)\n                    authenticated.set(user);\n            }\n        }));\n    }\n    const lsState = localStorage.getItem('view');\n    if (!lsState)\n        return localStorage.setItem('view', $view);\n    else\n        return view.set(lsState);\n});\n</script>\n\n<style>\n  @import url('https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css');\n  :global(main) {\n    text-align: center;\n    padding: 1em;\n    max-width: 450px;\n    margin: 0 auto;\n  }\n  :global(ul) {\n    margin-bottom: 0;\n  }\n  :global(li) {\n    list-style: none;\n  }\n  :global(textarea) {\n    resize: none;\n  }\n  :global(.card) {\n    position: relative;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    min-width: 0;\n    background-color: #fff;\n    background-clip: border-box;\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 0.25rem;\n  }\n  :global(.container) {\n    width: 100%;\n    margin: auto;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<svelte:head>\n  <title>Wish Collector{title ? ` | ${title}`.toUpperCase() : ''}</title>\n</svelte:head>\n<Navbar {handleView} />\n<main>\n  {#if $view === ''}\n    <Home {handleView} />\n  {:else if $view === 'login' || $view === 'register'}\n    <Login />\n  {:else if $view === 'posts'}\n    <Posts />\n  {:else if $view === 'users'}\n    <Users />\n  {:else if $view === 'profile'}\n    <Profile />\n  {/if}\n</main>\n",
    "<script lang=\"ts\">;\nimport { getContext } from 'svelte';\nimport { fly } from 'svelte/transition';\nimport { Label, FormGroup, Input, ButtonGroup } from 'sveltestrap';\nexport let props;\nlet { actions, toggle } = props;\nconst { state: { view }, } = getContext('state');\nconst handleSubmit = (e) => {\n    const formData = new FormData(e.currentTarget);\n    let params = {};\n    formData.forEach((v, k) => Object.assign(params, { [k]: v }));\n    switch ($view) {\n        case 'posts':\n            actions.add(params);\n            break;\n        case 'users':\n            break;\n        default:\n            break;\n    }\n};\n</script>\n\n<style>\n  .container {\n    max-width: 450px;\n  }\n</style>\n\n<div class=\"container\" transition:fly={{ duration: 300, y: 30 }}>\n  <form id={`add-${$view}`} on:submit|preventDefault={handleSubmit}>\n    {#if $view === 'users'}\n      <FormGroup>\n        <Label>Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          class=\"form-control\"\n          required\n          size=\"\"\n          readonly={false} />\n      </FormGroup>\n      <FormGroup>\n        <Label>Email</Label>\n        <Input type=\"email\" name=\"email\" required size=\"\" readonly={false} />\n      </FormGroup>\n      <FormGroup>\n        <Label>Password</Label>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          required\n          size=\"\"\n          readonly={false} />\n      </FormGroup>\n    {:else if $view === 'posts'}\n      <FormGroup>\n        <Label>Title</Label>\n        <Input type=\"text\" name=\"title\" required size=\"\" readonly={false} />\n      </FormGroup>\n      <FormGroup>\n        <Label>Body</Label>\n        <Input type=\"textarea\" rows={3} name=\"body\" size=\"\" readonly={false} />\n      </FormGroup>\n    {/if}\n    <ButtonGroup>\n      <button\n        class=\"btn btn-outline-primary\"\n        type=\"submit\"\n        form={`add-${$view}`}>Done</button>\n      <button\n        class=\"btn btn-outline-secondary\"\n        on:click|preventDefault={toggle}>\n        Cancel\n      </button>\n    </ButtonGroup>\n  </form>\n</div>\n",
    "<style>\n  .fab-container {\n    position: absolute;\n    bottom: 50px;\n    right: 25px;\n    padding: 10px;\n    border-radius: 50%;\n    border: solid;\n    border-color: #eb637f;\n    background-color: var(--primary);\n  }\n  .fab-icon img {\n    height: 16px;\n    width: 16px;\n  }\n</style>\n\n<div class=\"fab-container\">\n  <span class=\"fab-icon\">\n    <img src=\"images/add-icon-white@2x.png\" alt=\"toggle\" />\n  </span>\n</div>\n",
    "<script lang=\"ts\" context=\"module\">;\nimport { USER_ROLES } from '../../bin/models/StaticTypes';\nimport { getContext } from 'svelte';\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter, ListGroup, ListGroupItem, Input, Spinner, FormGroup, Label, } from 'sveltestrap';\n</script>\n\n<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport let props;\nlet { id, data, edit, loading, modalProps, actions, newComment } = props;\nconst { state: { authenticated }, Methods: { getPostId }, } = getContext('state');\nconst handleAddComment = () => actions['comment'](newComment, () => __awaiter(void 0, void 0, void 0, function* () {\n    if (!loading)\n        loading = true;\n    data = yield getPostId(id);\n    if ('title' in data)\n        newComment.post = data;\n    newComment.body = null;\n    newComment.name = null;\n    newComment.email = null;\n    loading = false;\n}));\n</script>\n\n<style>\n  div.d-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n  }\n</style>\n\n<Modal {...modalProps}>\n  <ModalHeader toggle={modalProps.toggle}>\n    {edit ? 'Edit ' : ''}Post Details\n  </ModalHeader>\n  <ModalBody>\n    {#if data}\n      <section class=\"title\">\n        {#if edit}\n          <FormGroup>\n            <Label>Title</Label>\n            <Input\n              type=\"text\"\n              readonly={false}\n              size=\"12\"\n              bind:value={data['title']} />\n          </FormGroup>\n        {:else}\n          <h2>{'title' in data && data.title}</h2>\n        {/if}\n      </section>\n      <section class=\"body\">\n        {#if edit}\n          <FormGroup>\n            <Label>Body</Label>\n            <textarea rows={3} class=\"form-control\" bind:value={data['body']} />\n          </FormGroup>\n        {:else}\n          <p>{'body' in data && data.body}</p>\n          <sub>{'user' in data && data.user.name}</sub>\n        {/if}\n      </section>\n      {#if !edit && 'comments' in data}\n        <hr />\n        <h5>Comments</h5>\n        <section class=\"comments\" style=\"max-height: 300px;overflow:auto;\">\n          <ListGroup flush={true}>\n            {#each data.comments as comment, i (i)}\n              <ListGroupItem>\n                <p>{comment.body}</p><sub>{comment.name}</sub>\n              </ListGroupItem>\n            {/each}\n            <ListGroupItem>\n              <form on:submit|preventDefault={handleAddComment}>\n                <FormGroup>\n                  <textarea\n                    required\n                    rows={2}\n                    class=\"form-control\"\n                    placeholder=\"Add a new comment...\"\n                    bind:value={newComment['body']} />\n                  {#if !$authenticated}\n                    <div class=\"d-grid\">\n                      <Label>\n                        Name: <input required type=\"text\" class=\"form-control\" placeholder=\"Enter your name\" bind:value={newComment['name']} />\n                      </Label>\n\n                      <Label>\n                        Email: <input required type=\"email\" class=\"form-control\" placeholder=\"Enter your email\" bind:value={newComment['email']} />\n                      </Label>\n                    </div>\n                  {/if}\n                  <hr />\n                  <button type=\"submit\" class=\"btn btn-outline-primary\">\n                    Add Comment\n                  </button>\n                </FormGroup>\n              </form>\n              <hr />\n            </ListGroupItem>\n          </ListGroup>\n        </section>\n      {/if}\n    {:else}\n      Loading ...\n      <Spinner color={'primary'} />\n    {/if}\n  </ModalBody>\n  {#if $authenticated && ($authenticated.email === data.user.email || $authenticated.role === USER_ROLES.admin)}\n    <ModalFooter>\n      <Button\n        outline={edit}\n        color={!edit ? 'warning' : 'primary'}\n        on:click={!edit ? () => (edit = !edit) : () => actions['update'](data)}>\n        {!edit ? 'Edit' : 'Done'}\n      </Button>\n      <Button\n        outline\n        color=\"secondary\"\n        on:click={!edit ? modalProps.toggle : () => (edit = !edit)}>\n        Close\n      </Button>\n    </ModalFooter>\n  {/if}\n</Modal>\n",
    "<script lang=\"ts\">import { getContext } from 'svelte';\n;\nimport { USER_ROLES } from '../bin/models/StaticTypes';\nexport let handleView;\nconst { state: { view, authenticated }, Methods: { logout }, } = getContext('state');\nconst handleLogout = () => {\n    localStorage.clear();\n    return logout(() => (authenticated.set(undefined), view.set('')));\n};\n</script>\n\n<style>\n  nav {\n    background-color: #dbdbdb;\n    box-sizing: border-box;\n    border-top: 3px solid #eb637f;\n    border-bottom: 3px solid #8b9eab;\n    border-radius: 20px;\n    font-weight: 300;\n    padding: 0 1em;\n    display: flex;\n  }\n\n  div {\n    margin: auto 0;\n    opacity: 0.7;\n    cursor: pointer;\n  }\n  div.actions {\n    position: absolute;\n    top: 25px;\n    right: 20px;\n  }\n\n  img {\n    height: 40px;\n    border-radius: 50px;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  /* clearfix */\n  ul::after {\n    content: '';\n    flex: 1;\n    clear: both;\n  }\n\n  li {\n    flex: 1;\n    float: left;\n    font-weight: 500;\n    list-style: none;\n    margin: 15px 5px;\n    cursor: pointer;\n  }\n\n  .selected,\n  li:hover,\n  .actions span:hover {\n    position: relative;\n    display: inline-block;\n    color: #ff4000ab;\n  }\n\n  .selected::after,\n  li:hover::after,\n  .actions span:hover::after {\n    position: absolute;\n    content: '';\n    width: calc(100% - 1em);\n    height: 4px;\n    border-radius: 10px;\n    background-color: #1c8806;\n    display: block;\n    bottom: -1px;\n  }\n</style>\n\n<nav>\n  <div id=\"\" on:click={handleView}><img alt=\"brand\" src={'favicon.png'} /></div>\n  <ul>\n    <li id={'posts'} on:click={handleView} class:selected={$view === 'posts'}>\n      Posts\n    </li>\n    {#if $authenticated && $authenticated.role === USER_ROLES.admin}\n      <li id={'users'} on:click={handleView} class:selected={$view === 'users'}>\n        Users\n      </li>\n    {/if}\n  </ul>\n  <div class=\"actions\">\n    {#if !$authenticated}\n      <span\n        id={'login'}\n        on:click={handleView}\n        class:selected={$view === 'login'}>\n        Login\n      </span>\n      <span\n        id={'register'}\n        on:click={handleView}\n        class:selected={$view === 'register'}>\n        Register\n      </span>\n    {:else}\n      <span\n        id={'profile'}\n        on:click={handleView}\n        class:selected={$view === 'profile'}>\n        Profile\n      </span>\n      <span on:click={handleLogout}>Logout</span>\n    {/if}\n  </div>\n</nav>\n",
    "<script lang=\"ts\">import { fly } from 'svelte/transition';\nexport let handleView;\n</script>\n\n<style>\n  span {\n    cursor: pointer;\n    color: var(--primary);\n  }\n  span:hover {\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"container\" in:fly={{ duration: 300, x: 30 }}>\n  <h5>Welcome to the Wish Collector</h5>\n  <p>\n    To see upcoming birthdays <span id=\"posts\" on:click={handleView}>click here</span>\n  </p>\n  <div class=\"container\">\n    <p>\n      The Wish Collector application is intended to make it easier for you to\n      add your wishes for a colleague's upcoming birthday. <br />A post is added\n      for upcoming birthdays and you can add your wishes in the comments\n      section.\n    </p>\n    <i>You can add your comments without registering, however, once registered\n      you will have access to CUD (Create, Update & Delete) functionality for\n      your posts and comments</i>\n  </div>\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport { getContext, afterUpdate } from 'svelte';\nimport { fade } from 'svelte/transition';\nimport { FormGroup, Label, Button } from 'sveltestrap';\nconst { state: { view, authenticated }, Methods: { getUserId }, } = getContext('state');\nlet error;\nconst handleLogin = (e) => __awaiter(void 0, void 0, void 0, function* () {\n    const formData = new FormData(e.currentTarget);\n    const params = {};\n    formData.forEach((v, k) => Object.assign(params, { [k]: v }));\n    switch ($view) {\n        case 'login':\n            try {\n                const response = yield fetch('http://localhost:3000/api/auth/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(params),\n                });\n                const data = yield response.json();\n                if (data.state === 'success') {\n                    const user = yield getUserId(data.user._id);\n                    if (user)\n                        return authenticated.set(user), view.set('');\n                }\n                else if (data.state === 'failure') {\n                    console.warn(data.message);\n                    error = data.message;\n                }\n            }\n            catch (error) {\n                console.warn(error);\n            }\n            break;\n        case 'register':\n            try {\n                const response = yield fetch('http://localhost:3000/api/auth/register', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(params),\n                });\n                const data = yield response.json();\n                if (data.state === 'success') {\n                    const user = yield getUserId(data.user._id);\n                    if (user)\n                        return authenticated.set(user), view.set('');\n                }\n                else if (data.state === 'failure') {\n                    console.warn(data.message);\n                    error = data.message;\n                }\n            }\n            catch (error) {\n                console.warn(error);\n            }\n            break;\n        default:\n            break;\n    }\n});\nafterUpdate(() => {\n    if (error) {\n        setTimeout(() => (error = null), 2000);\n    }\n});\n</script>\n\n<style>\n  div.container {\n    max-width: 450px;\n    border-radius: 50px;\n  }\n</style>\n\n<div class=\"container\">\n  <form id={`user-${$view}`} on:submit|preventDefault={handleLogin}>\n    {#if $view === 'login'}\n      <FormGroup>\n        <Label>Email</Label>\n        <input\n          class=\"form-control\"\n          type=\"email\"\n          name=\"username\"\n          placeholder=\"Enter email address\" />\n      </FormGroup>\n      <FormGroup>\n        <Label>Password</Label>\n        <input\n          class=\"form-control\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Enter password\" />\n      </FormGroup>\n    {:else if $view === 'register'}\n      <FormGroup>\n        <Label>Name</Label>\n        <input\n          class=\"form-control\"\n          type=\"name\"\n          name=\"name\"\n          placeholder=\"Enter full name\" />\n      </FormGroup>\n      <FormGroup>\n        <Label>Email</Label>\n        <input\n          class=\"form-control\"\n          type=\"email\"\n          name=\"username\"\n          placeholder=\"Enter email address\" />\n      </FormGroup>\n      <FormGroup>\n        <Label>Password</Label>\n        <input\n          class=\"form-control\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Enter password\" />\n      </FormGroup>\n    {/if}\n    {#if error}\n      <div\n        class=\"container bg-warning text-dark\"\n        transition:fade={{ duration: 300, delay: 300 }}>\n        {error}\n      </div>\n    {/if}\n    <hr />\n    <Button\n      type=\"submit\"\n      color=\"primary\"\n      outline\n      class=\"m-auto\"\n      style=\"text-transform:capitalize;\">\n      {$view}\n    </Button>\n  </form>\n</div>\n",
    "<script lang=\"ts\" context=\"module\">;\nimport { USER_ROLES } from '../bin/models/StaticTypes';\nimport { getContext, onMount } from 'svelte';\nimport { fly } from 'svelte/transition';\nimport { CardTitle, CardBody, CardText } from 'sveltestrap';\nimport Details from '../Components/Details.svelte';\nimport Add from '../Components/Add.svelte';\n</script>\n\n<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst { state: { posts, authenticated }, Methods: { getPosts, addPost, updatePostId, addComment }, } = getContext('state');\nlet id;\nlet open = false;\nlet add = false;\nconst actions = {\n    add(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                title: data.title,\n                body: data.body,\n                userId: $authenticated._id,\n            };\n            const newPosts = yield addPost(params);\n            if (newPosts)\n                posts.set(newPosts);\n            if (add)\n                add = false;\n        });\n    },\n    update(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                id: data._id,\n                title: data.title,\n                body: data.body,\n                userId: data.user._id,\n            };\n            const newPost = yield updatePostId(params);\n            if (newPost)\n                return handleClose();\n        });\n    },\n    comment(data, callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                body: data.body,\n                name: data.name,\n                email: data.email,\n                postId: data.post._id,\n            };\n            if ($authenticated) {\n                params.name = $authenticated.name;\n                params.email = $authenticated.email;\n            }\n            const newPost = yield addComment(params);\n            if (newPost)\n                return callback();\n        });\n    },\n};\nconst handleClick = (e) => ((id = e.currentTarget.id), (open = true));\nfunction handleClose() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield getPosts();\n        }\n        catch (error) {\n            console.warn(error);\n        }\n        if (open)\n            return (id = undefined), (open = false);\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        yield getPosts();\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}));\n</script>\n\n<style>\n  .section-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    row-gap: 1rem;\n    column-gap: 0.5rem;\n  }\n  .card {\n    margin-bottom: 1rem;\n    color: #3f3f3f;\n    cursor: pointer;\n  }\n  .card.card:hover {\n    background-color: #3f3f3f;\n    color: #ffffff;\n  }\n  .card h2 {\n    padding: 0 5px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-transform: capitalize;\n  }\n  @media (max-width: 640px) {\n    .section-grid {\n      grid-template-columns: 1fr;\n    }\n  }\n</style>\n\n<div class=\"container\" in:fly={{ duration: 300, x: 300 }}>\n  {#if open}\n    <Details props={{ id, open, toggle: handleClose, actions }} />\n  {:else if add && $authenticated && $authenticated.role === USER_ROLES.admin}\n    <Add props={{ actions, toggle: () => (add = false) }} />\n  {:else if $posts.length > 0}\n    {#if $authenticated && $authenticated.role === USER_ROLES.admin}\n      <div class=\"card\" on:click={() => (add = true)}>Add new Post</div>\n    {/if}\n    <section class={$posts.length > 1 ? 'section-grid' : ''}>\n      {#each $posts as post, i (i)}\n        <div\n          class=\"card\"\n          id={post._id}\n          on:click={handleClick}\n          in:fly={{ duration: 300, x: 300 }}>\n          <CardTitle>\n            <h2>{post.title}</h2>\n          </CardTitle>\n          <CardBody>\n            <CardText>- {post.user.name} -</CardText>\n          </CardBody>\n        </div>\n      {/each}\n    </section>\n  {:else if $posts.length === 0}\n    <section style=\"max-width:450px;margin:0 auto;\">\n      {#if $authenticated && $authenticated.role === USER_ROLES.admin}\n        <div class=\"card\" on:click={() => (add = true)}>Add new Post</div>\n      {/if}\n      <div class=\"container\">No Posts added</div>\n    </section>\n  {:else}\n    <p>...loading</p>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport { getContext, onMount } from 'svelte';\nimport { fly } from 'svelte/transition';\nimport { Table } from 'sveltestrap';\nimport Details from '../Components/Details.svelte';\nconst { state: { users }, Methods: { getUsers, addUser, updateUserId }, } = getContext('state');\nlet id;\nlet open;\nconst handleClick = (e) => ((id = e.currentTarget.id), (open = true));\nconst actions = {\n    add(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name: data.name,\n                email: data.email,\n                password: data.password,\n                role: data.role,\n            };\n            try {\n                const newUsers = yield addUser(params);\n                if (newUsers)\n                    users.set(newUsers);\n            }\n            catch (error) {\n                console.warn(error);\n            }\n            if (open)\n                return (id = undefined), (open = false);\n        });\n    },\n    update(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                id: data._id,\n                name: data.name,\n                email: data.email,\n                role: data.role,\n            };\n            try {\n                const newUser = yield updateUserId(params);\n                if (newUser)\n                    yield handleClose();\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n    },\n};\nfunction handleClose() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield getUsers();\n        }\n        catch (error) {\n            console.warn(error);\n        }\n        if (open)\n            return (id = undefined), (open = false);\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        yield getUsers();\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}));\n</script>\n\n<style>\n  .table-container {\n    max-height: calc(100vh - 450px);\n    overflow: auto;\n  }\n  @media (max-width: 640px) {\n    .table-container {\n      max-width: 450px;\n    }\n  }\n</style>\n\n<div class=\"container\" in:fly={{ duration: 300, x: 300 }}>\n  {#if open}\n    <Details props={{ id, actions, toggle: handleClose, open }} />\n  {:else if $users.length > 0}\n    <div class=\"table-container\">\n      <Table striped hover bordered>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Name</th>\n            <th>Posts</th>\n            <th>Role</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each $users as user, i (i)}\n            <tr>\n              <th scope=\"row\">{i + 1}</th>\n              <td id={user._id} style=\"cursor:pointer;\" on:click={handleClick}>\n                {user.name}\n              </td>\n              <td>{user.posts.length}</td>\n              <td>{user.role}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </Table>\n    </div>\n  {:else}\n    <p>...loading</p>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}